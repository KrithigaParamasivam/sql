with error nul values

 create table myemp(Eno number(6) PRIMARY KEY,Ename varchar2(30) NOT NULL,Deptno number(4) NOT NULL,Esal number(8,2));

Table created.

SQL> insert all
  2      into myemp(Eno,Ename,Deptno,Esal) values(101,'krithi',10,15000)
  3      into myemp(Eno,Ename,Deptno,Esal) values(102,'divya',20,10000)
  4      into myemp(Eno,Ename,Deptno,Esal) values(103,'haritha',30,8000)
  5      into myemp(Eno,Ename,Deptno,Esal) values(104,'sathish',40,4000)
  6      into myemp(Eno,Ename,Deptno,Esal) values(105,'sakthi',50,13000)
  7      select * from dual;

5 rows created.

SQL> alter table myemp add experience number(2) NOT  NULL;
alter table myemp add experience number(2) NOT  NULL
            *
ERROR at line 1:
ORA-01758: table must be empty to add mandatory (NOT NULL) column

1) create table myemp(Eno number(6) PRIMARY KEY,Ename varchar2(30) NOT NULL,Deptno number(4) NOT NULL,Esal number(8,2));

a)alter table myemp add experience number(2) NOT  NULL;

insert all
    into myemp(Eno,Ename,Deptno,Esal,Experience) values(101,'krithi',10,15000,2)
    into myemp(Eno,Ename,Deptno,Esal,Experience) values(102,'divya',20,10000,5)
    into myemp(Eno,Ename,Deptno,Esal,Experience) values(103,'haritha',30,8000,1)
    into myemp(Eno,Ename,Deptno,Esal,Experience) values(104,'sathish',40,4000,1)
    into myemp(Eno,Ename,Deptno,Esal,Experience) values(105,'sakthi',50,13000,2)
    select * from dual;


b)update myemp set Esal=null where Esal >=5000 and Esal <=10000;


2)Add a new column comm in myemp with some null and not null values. Now,
Create a new table ‘empcommnul’ by moving all null value-based rows from myemp to empcommnull.

ALTER TABLE myemp ADD comm number(3) default null;
    update myemp set comm=200 where Eno=102;
    update myemp set comm=200 where Eno=103;
    create table empcommnull as (select eno,ename,comm from myemp where comm IS NULL);

4)create a trigger with your own name for enforcing a constraint on insert or delete or update operations on of 
all columns of myemp by denying the said operations on weekend days(Saturday and Sunday) with message ‘Sorry Access on week-end days is denied’.


CREATE OR REPLACE TRIGGER weekend 
BEFORE INSERT OR UPDATE OR DELETE on myemp 
  FOR EACH ROW
  DECLARE
  v_day DATE := TRUNC(SYSDATE);
  ex_invalid  EXCEPTION; 
  BEGIN
    IF TO_CHAR(v_day,'DY')IN ('SAT','SUN') THEN
       RAISE ex_invalid;
    END IF;
    EXCEPTION 
    WHEN ex_invalid THEN 
      RAISE_APPLICATION_ERROR(-20001,'Sorry Access on week-end days is denied');
  END;

insert into myemp (Eno,Ename,Deptno,Esal) values (106,'sara',70,2);
  

5)Write any PL/SQL block which handles others exception in which reflects the error code and error message of the occurring exception.

    DECLARE
          d_id depart.depart_id%type := 80;
           d_name depart.depart_name%type;
          d_mid depart.manager_id%type;
        BEGIN
           SELECT depart_id,depart_name,manager_id into d_id,d_name,d_mid from depart
           WHERE depart_id=d_id;
           DBMS_OUTPUT.PUT_LINE ('Dept Id: '|| d_id);
           DBMS_OUTPUT.PUT_LINE ('Dept Name: '|| d_name);
         DBMS_OUTPUT.PUT_LINE ('Manager Id: ' || d_mid);
        EXCEPTION
         WHEN no_data_found THEN
             raise_application_error (-20001,'no record. No such Record with Dept_Id =80!');
         WHEN others THEN
            dbms_output.put_line('Error!');
    END;
   /
 

6)Create a table EBILL for the following specification.

SQL> CREATE TABLE ebill( cno varchar2(10) primary key,cname varchar2(30) NOT NULL,nounits number(4) NOT NULL,bamt number(8,2));

Table created.

SQL> insert all into ebill values('C12','Divya',100,'') into ebill values('C13','Krithi',200,'') into ebill values('C14','Viji',300,'') select * from dual;

3 rows created.

SQL> select * from ebill;

CNO        CNAME                             NOUNITS       BAMT
---------- ------------------------------ ---------- ----------
C12        Divya                                 100
C13        Krithi                                200
C14        Viji                                  300

select *
from ebill;
create procedure cal_bamt(in x varchar(10), out o decimal(8,2))
begin
declare done boolean default 0;
declare uits int(4);
declare amt_cur cursor for
select nounits from ebill where cno=x;
open amt_cur;
fetch amt_cur into uits;
if uits>200 then
set o=(uits-200)*1.5+150;
elseif uits>100 and uits<200 then
set o=(uits-100)*1.5+50;
else
set o=uits*0.5;
end if;
close amt_cur;
update ebill set bamt=o where cno=x;
select * from ebill where cno=x;
end
/